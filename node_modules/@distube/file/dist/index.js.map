{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { existsSync } from \"node:fs\";\nimport { fileURLToPath } from \"node:url\";\nimport { DisTubeError, PlayableExtractorPlugin, type ResolveOptions, Song } from \"distube\";\n\nexport class FilePlugin extends PlayableExtractorPlugin {\n  validate(url: string) {\n    try {\n      const u = new URL(url);\n      if (u.protocol === \"file:\") return true;\n    } catch {}\n    return false;\n  }\n\n  resolve<T>(url: string, options: ResolveOptions<T> = {}): Song<T> {\n    const u = new URL(url);\n    const path = fileURLToPath(u);\n    const name = path.match(/[^/\\\\]*$/)?.[0] ?? path;\n    if (!existsSync(path)) throw new DisTubeError(\"FILE_NOT_FOUND\", `File not found: ${path}`);\n    return new Song({ name, url, source: \"file\", playFromSource: true, plugin: this, id: path }, options);\n  }\n\n  getStreamURL(song: Song) {\n    if (!song.url) {\n      throw new DisTubeError(\"FILE_PLUGIN_INVALID_SONG\", \"Cannot get stream url from invalid song.\");\n    }\n    return song.url;\n  }\n\n  getRelatedSongs() {\n    return [];\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA2B;AAC3B,sBAA8B;AAC9B,qBAAiF;AAE1E,IAAM,aAAN,cAAyB,uCAAwB;AAAA,EAJxD,OAIwD;AAAA;AAAA;AAAA,EACtD,SAAS,KAAa;AACpB,QAAI;AACF,YAAM,IAAI,IAAI,IAAI,GAAG;AACrB,UAAI,EAAE,aAAa,QAAS,QAAO;AAAA,IACrC,QAAQ;AAAA,IAAC;AACT,WAAO;AAAA,EACT;AAAA,EAEA,QAAW,KAAa,UAA6B,CAAC,GAAY;AAChE,UAAM,IAAI,IAAI,IAAI,GAAG;AACrB,UAAM,WAAO,+BAAc,CAAC;AAC5B,UAAM,OAAO,KAAK,MAAM,UAAU,IAAI,CAAC,KAAK;AAC5C,QAAI,KAAC,2BAAW,IAAI,EAAG,OAAM,IAAI,4BAAa,kBAAkB,mBAAmB,IAAI,EAAE;AACzF,WAAO,IAAI,oBAAK,EAAE,MAAM,KAAK,QAAQ,QAAQ,gBAAgB,MAAM,QAAQ,MAAM,IAAI,KAAK,GAAG,OAAO;AAAA,EACtG;AAAA,EAEA,aAAa,MAAY;AACvB,QAAI,CAAC,KAAK,KAAK;AACb,YAAM,IAAI,4BAAa,4BAA4B,0CAA0C;AAAA,IAC/F;AACA,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,kBAAkB;AAChB,WAAO,CAAC;AAAA,EACV;AACF;","names":[]}