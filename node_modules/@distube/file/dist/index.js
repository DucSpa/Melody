"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  FilePlugin: () => FilePlugin
});
module.exports = __toCommonJS(src_exports);
var import_node_fs = require("fs");
var import_node_url = require("url");
var import_distube = require("distube");
var FilePlugin = class extends import_distube.PlayableExtractorPlugin {
  static {
    __name(this, "FilePlugin");
  }
  validate(url) {
    try {
      const u = new URL(url);
      if (u.protocol === "file:") return true;
    } catch {
    }
    return false;
  }
  resolve(url, options = {}) {
    const u = new URL(url);
    const path = (0, import_node_url.fileURLToPath)(u);
    const name = path.match(/[^/\\]*$/)?.[0] ?? path;
    if (!(0, import_node_fs.existsSync)(path)) throw new import_distube.DisTubeError("FILE_NOT_FOUND", `File not found: ${path}`);
    return new import_distube.Song({ name, url, source: "file", playFromSource: true, plugin: this, id: path }, options);
  }
  getStreamURL(song) {
    if (!song.url) {
      throw new import_distube.DisTubeError("FILE_PLUGIN_INVALID_SONG", "Cannot get stream url from invalid song.");
    }
    return song.url;
  }
  getRelatedSongs() {
    return [];
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FilePlugin
});
//# sourceMappingURL=index.js.map